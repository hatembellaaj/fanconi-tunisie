package tn.tfar.fanconi.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PatientAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatientAllPropertiesEquals(Patient expected, Patient actual) {
        assertPatientAutoGeneratedPropertiesEquals(expected, actual);
        assertPatientAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatientAllUpdatablePropertiesEquals(Patient expected, Patient actual) {
        assertPatientUpdatableFieldsEquals(expected, actual);
        assertPatientUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatientAutoGeneratedPropertiesEquals(Patient expected, Patient actual) {
        assertThat(expected)
            .as("Verify Patient auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatientUpdatableFieldsEquals(Patient expected, Patient actual) {
        assertThat(expected)
            .as("Verify Patient relevant properties")
            .satisfies(e -> assertThat(e.getNdossierP()).as("check ndossierP").isEqualTo(actual.getNdossierP()))
            .satisfies(e -> assertThat(e.getNom()).as("check nom").isEqualTo(actual.getNom()))
            .satisfies(e -> assertThat(e.getPrenom()).as("check prenom").isEqualTo(actual.getPrenom()))
            .satisfies(e -> assertThat(e.getDateNaissance()).as("check dateNaissance").isEqualTo(actual.getDateNaissance()))
            .satisfies(e -> assertThat(e.getLieuNaissance()).as("check lieuNaissance").isEqualTo(actual.getLieuNaissance()))
            .satisfies(e -> assertThat(e.getSexe()).as("check sexe").isEqualTo(actual.getSexe()))
            .satisfies(e -> assertThat(e.getGouvernorat()).as("check gouvernorat").isEqualTo(actual.getGouvernorat()))
            .satisfies(e -> assertThat(e.getAdresse()).as("check adresse").isEqualTo(actual.getAdresse()))
            .satisfies(e -> assertThat(e.getReperes()).as("check reperes").isEqualTo(actual.getReperes()))
            .satisfies(e -> assertThat(e.getTel()).as("check tel").isEqualTo(actual.getTel()))
            .satisfies(e -> assertThat(e.getPrenomPere()).as("check prenomPere").isEqualTo(actual.getPrenomPere()))
            .satisfies(e -> assertThat(e.getNomMere()).as("check nomMere").isEqualTo(actual.getNomMere()))
            .satisfies(e -> assertThat(e.getPrenomMere()).as("check prenomMere").isEqualTo(actual.getPrenomMere()))
            .satisfies(e -> assertThat(e.getNomGMP()).as("check nomGMP").isEqualTo(actual.getNomGMP()))
            .satisfies(e -> assertThat(e.getNomGMM()).as("check nomGMM").isEqualTo(actual.getNomGMM()))
            .satisfies(e -> assertThat(e.getAge()).as("check age").isEqualTo(actual.getAge()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatientUpdatableRelationshipsEquals(Patient expected, Patient actual) {
        // empty method
    }
}
