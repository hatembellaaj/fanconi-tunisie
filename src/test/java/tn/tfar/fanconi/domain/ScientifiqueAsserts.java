package tn.tfar.fanconi.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ScientifiqueAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScientifiqueAllPropertiesEquals(Scientifique expected, Scientifique actual) {
        assertScientifiqueAutoGeneratedPropertiesEquals(expected, actual);
        assertScientifiqueAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScientifiqueAllUpdatablePropertiesEquals(Scientifique expected, Scientifique actual) {
        assertScientifiqueUpdatableFieldsEquals(expected, actual);
        assertScientifiqueUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScientifiqueAutoGeneratedPropertiesEquals(Scientifique expected, Scientifique actual) {
        assertThat(expected)
            .as("Verify Scientifique auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScientifiqueUpdatableFieldsEquals(Scientifique expected, Scientifique actual) {
        assertThat(expected)
            .as("Verify Scientifique relevant properties")
            .satisfies(e -> assertThat(e.getCodeSC()).as("check codeSC").isEqualTo(actual.getCodeSC()))
            .satisfies(e -> assertThat(e.getNomSC()).as("check nomSC").isEqualTo(actual.getNomSC()))
            .satisfies(e -> assertThat(e.getPrenomSC()).as("check prenomSC").isEqualTo(actual.getPrenomSC()))
            .satisfies(e -> assertThat(e.getServiceSC()).as("check serviceSC").isEqualTo(actual.getServiceSC()))
            .satisfies(e -> assertThat(e.getCentreSC()).as("check centreSC").isEqualTo(actual.getCentreSC()))
            .satisfies(e -> assertThat(e.getAdresseSC()).as("check adresseSC").isEqualTo(actual.getAdresseSC()))
            .satisfies(e -> assertThat(e.getTelSC()).as("check telSC").isEqualTo(actual.getTelSC()))
            .satisfies(e -> assertThat(e.getEmailSC()).as("check emailSC").isEqualTo(actual.getEmailSC()))
            .satisfies(e -> assertThat(e.getPhotoSC()).as("check photoSC").isEqualTo(actual.getPhotoSC()))
            .satisfies(e ->
                assertThat(e.getPhotoSCContentType()).as("check photoSC contenty type").isEqualTo(actual.getPhotoSCContentType())
            )
            .satisfies(e -> assertThat(e.getTypeSC()).as("check typeSC").isEqualTo(actual.getTypeSC()))
            .satisfies(e -> assertThat(e.getLoginSC()).as("check loginSC").isEqualTo(actual.getLoginSC()))
            .satisfies(e -> assertThat(e.getPasswdSC()).as("check passwdSC").isEqualTo(actual.getPasswdSC()))
            .satisfies(e -> assertThat(e.getuRL()).as("check uRL").isEqualTo(actual.getuRL()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScientifiqueUpdatableRelationshipsEquals(Scientifique expected, Scientifique actual) {
        // empty method
    }
}
