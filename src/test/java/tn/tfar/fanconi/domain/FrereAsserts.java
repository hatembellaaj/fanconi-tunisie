package tn.tfar.fanconi.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FrereAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFrereAllPropertiesEquals(Frere expected, Frere actual) {
        assertFrereAutoGeneratedPropertiesEquals(expected, actual);
        assertFrereAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFrereAllUpdatablePropertiesEquals(Frere expected, Frere actual) {
        assertFrereUpdatableFieldsEquals(expected, actual);
        assertFrereUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFrereAutoGeneratedPropertiesEquals(Frere expected, Frere actual) {
        assertThat(expected)
            .as("Verify Frere auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFrereUpdatableFieldsEquals(Frere expected, Frere actual) {
        assertThat(expected)
            .as("Verify Frere relevant properties")
            .satisfies(e -> assertThat(e.getnDossierF()).as("check nDossierF").isEqualTo(actual.getnDossierF()))
            .satisfies(e -> assertThat(e.getIdFrere()).as("check idFrere").isEqualTo(actual.getIdFrere()))
            .satisfies(e -> assertThat(e.getPrenomFrere()).as("check prenomFrere").isEqualTo(actual.getPrenomFrere()))
            .satisfies(e -> assertThat(e.getAtteint()).as("check atteint").isEqualTo(actual.getAtteint()))
            .satisfies(e -> assertThat(e.getPlacefratrie()).as("check placefratrie").isEqualTo(actual.getPlacefratrie()))
            .satisfies(e -> assertThat(e.getSexeF()).as("check sexeF").isEqualTo(actual.getSexeF()))
            .satisfies(e -> assertThat(e.getDecedes()).as("check decedes").isEqualTo(actual.getDecedes()))
            .satisfies(e -> assertThat(e.getAge()).as("check age").isEqualTo(actual.getAge()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFrereUpdatableRelationshipsEquals(Frere expected, Frere actual) {
        // empty method
    }
}
