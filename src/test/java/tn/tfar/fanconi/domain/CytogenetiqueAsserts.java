package tn.tfar.fanconi.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CytogenetiqueAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCytogenetiqueAllPropertiesEquals(Cytogenetique expected, Cytogenetique actual) {
        assertCytogenetiqueAutoGeneratedPropertiesEquals(expected, actual);
        assertCytogenetiqueAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCytogenetiqueAllUpdatablePropertiesEquals(Cytogenetique expected, Cytogenetique actual) {
        assertCytogenetiqueUpdatableFieldsEquals(expected, actual);
        assertCytogenetiqueUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCytogenetiqueAutoGeneratedPropertiesEquals(Cytogenetique expected, Cytogenetique actual) {
        assertThat(expected)
            .as("Verify Cytogenetique auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCytogenetiqueUpdatableFieldsEquals(Cytogenetique expected, Cytogenetique actual) {
        assertThat(expected)
            .as("Verify Cytogenetique relevant properties")
            .satisfies(e -> assertThat(e.getnDossierPatient()).as("check nDossierPatient").isEqualTo(actual.getnDossierPatient()))
            .satisfies(e -> assertThat(e.getnEtudeCyto()).as("check nEtudeCyto").isEqualTo(actual.getnEtudeCyto()))
            .satisfies(e -> assertThat(e.getLymphocytes()).as("check lymphocytes").isEqualTo(actual.getLymphocytes()))
            .satisfies(e -> assertThat(e.getDateSang()).as("check dateSang").isEqualTo(actual.getDateSang()))
            .satisfies(e -> assertThat(e.getLaboratoire()).as("check laboratoire").isEqualTo(actual.getLaboratoire()))
            .satisfies(e -> assertThat(e.getAgentPontant()).as("check agentPontant").isEqualTo(actual.getAgentPontant()))
            .satisfies(e -> assertThat(e.getInstabilite()).as("check instabilite").isEqualTo(actual.getInstabilite()))
            .satisfies(e ->
                assertThat(e.getInstabilitePourcentage()).as("check instabilitePourcentage").isEqualTo(actual.getInstabilitePourcentage())
            )
            .satisfies(e -> assertThat(e.getiR()).as("check iR").isEqualTo(actual.getiR()))
            .satisfies(e -> assertThat(e.getiRPourcentage()).as("check iRPourcentage").isEqualTo(actual.getiRPourcentage()))
            .satisfies(e -> assertThat(e.getMoelle()).as("check moelle").isEqualTo(actual.getMoelle()))
            .satisfies(e -> assertThat(e.getDateMoelle()).as("check dateMoelle").isEqualTo(actual.getDateMoelle()))
            .satisfies(e -> assertThat(e.getResultatMoelle()).as("check resultatMoelle").isEqualTo(actual.getResultatMoelle()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCytogenetiqueUpdatableRelationshipsEquals(Cytogenetique expected, Cytogenetique actual) {
        // empty method
    }
}
