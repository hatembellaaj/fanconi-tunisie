import { TestBed } from '@angular/core/testing';

import { sampleWithNewData, sampleWithRequiredData } from '../fiche.test-samples';

import { FicheFormService } from './fiche-form.service';

describe('Fiche Form Service', () => {
  let service: FicheFormService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(FicheFormService);
  });

  describe('Service methods', () => {
    describe('createFicheFormGroup', () => {
      it('should create a new form with FormControl', () => {
        const formGroup = service.createFicheFormGroup();

        expect(formGroup.controls).toEqual(
          expect.objectContaining({
            id: expect.any(Object),
            nDossier: expect.any(Object),
            dateDiagnostic: expect.any(Object),
            dateEnregistrement: expect.any(Object),
            medecin: expect.any(Object),
            hopital: expect.any(Object),
            service: expect.any(Object),
            degConsang: expect.any(Object),
            placeEnfant: expect.any(Object),
            nbVivant: expect.any(Object),
            nbMort: expect.any(Object),
            mortNe: expect.any(Object),
            avortement: expect.any(Object),
            cousin: expect.any(Object),
            membre: expect.any(Object),
            arbregenealogique: expect.any(Object),
            arbregenealogiquecancer: expect.any(Object),
            syndromeAnemique: expect.any(Object),
            syndromeHem: expect.any(Object),
            syndromeInf: expect.any(Object),
            decouverteFort: expect.any(Object),
            enqueteFam: expect.any(Object),
            typeCancer: expect.any(Object),
            cancer: expect.any(Object),
            tailleNaiss: expect.any(Object),
            poidsNaiss: expect.any(Object),
            hypotrophie: expect.any(Object),
            troubleCroi: expect.any(Object),
            aAgeChDiag: expect.any(Object),
            mAgeChDiag: expect.any(Object),
            aAgeOssDiag: expect.any(Object),
            mAgeOssDiag: expect.any(Object),
            ageRetard: expect.any(Object),
            poids: expect.any(Object),
            poidsDS: expect.any(Object),
            taille: expect.any(Object),
            tailleDS: expect.any(Object),
            atteinteCut: expect.any(Object),
            tacheCaf: expect.any(Object),
            ventre: expect.any(Object),
            membreSup: expect.any(Object),
            membreInf: expect.any(Object),
            visage: expect.any(Object),
            thorax: expect.any(Object),
            dOS: expect.any(Object),
            hyperPig: expect.any(Object),
            hypochromique: expect.any(Object),
            couleurPeau: expect.any(Object),
            autreAtCut: expect.any(Object),
            atteinteTete: expect.any(Object),
            microcephalie: expect.any(Object),
            microphtalmie: expect.any(Object),
            facieTrig: expect.any(Object),
            traitsFin: expect.any(Object),
            autreAtTete: expect.any(Object),
            empreintedigitiforme: expect.any(Object),
            malUro: expect.any(Object),
            uIV: expect.any(Object),
            echo: expect.any(Object),
            reinEctop: expect.any(Object),
            siegeEctopie: expect.any(Object),
            reinFerChev: expect.any(Object),
            petitRein: expect.any(Object),
            reinUnique: expect.any(Object),
            ectopTest: expect.any(Object),
            vergeInsuf: expect.any(Object),
            autreAnomVerge: expect.any(Object),
            retardPubertaire: expect.any(Object),
            mTanner: expect.any(Object),
            pTanner: expect.any(Object),
            tTanner: expect.any(Object),
            anomUrin: expect.any(Object),
            typeAnomUrin: expect.any(Object),
            atteinteOss: expect.any(Object),
            radiosfaites: expect.any(Object),
            anomPouce: expect.any(Object),
            surnumerarie: expect.any(Object),
            agenesiePouce: expect.any(Object),
            bifide: expect.any(Object),
            hypoPouce: expect.any(Object),
            aspectPouce: expect.any(Object),
            hypoEminence: expect.any(Object),
            absenceRadial: expect.any(Object),
            pouceBas: expect.any(Object),
            autreAnomPouce: expect.any(Object),
            anomAutDoigts: expect.any(Object),
            courtstrapus: expect.any(Object),
            syndactylie: expect.any(Object),
            autreAnomDoigts: expect.any(Object),
            anomalieos: expect.any(Object),
            agenesieRadius: expect.any(Object),
            autreanomalieMembresup: expect.any(Object),
            anomOrteil: expect.any(Object),
            preciseAnomOrt: expect.any(Object),
            lCH: expect.any(Object),
            autreanomalieMembreinf: expect.any(Object),
            anomRachis: expect.any(Object),
            preciseAnomRac: expect.any(Object),
            autreAnomOss: expect.any(Object),
            anomNeuro: expect.any(Object),
            retardMent: expect.any(Object),
            hypoacousie: expect.any(Object),
            strabisme: expect.any(Object),
            performanceScolaire: expect.any(Object),
            autreanomalieneurologique: expect.any(Object),
            anomCardVas: expect.any(Object),
            echoCoeur: expect.any(Object),
            preciseAnomCardio: expect.any(Object),
            anomDig: expect.any(Object),
            preciseAnomDig: expect.any(Object),
            endocrinopathie: expect.any(Object),
            diabete: expect.any(Object),
            insulinoDep: expect.any(Object),
            hypothyroidie: expect.any(Object),
            ageDecouverte: expect.any(Object),
            autreEndocrinopathie: expect.any(Object),
            autreAnomCong: expect.any(Object),
            dateNumSanguine: expect.any(Object),
            age: expect.any(Object),
            hb: expect.any(Object),
            vGM: expect.any(Object),
            retic: expect.any(Object),
            leuco: expect.any(Object),
            pNN: expect.any(Object),
            plq: expect.any(Object),
            hbInf: expect.any(Object),
            plqInf: expect.any(Object),
            pNNInf: expect.any(Object),
            electrophoreseHb: expect.any(Object),
            hbf: expect.any(Object),
            myelogramme: expect.any(Object),
            cellularite: expect.any(Object),
            erythroblaste: expect.any(Object),
            morphologieEryth: expect.any(Object),
            morphologieGran: expect.any(Object),
            morphologieMega: expect.any(Object),
            granuleux: expect.any(Object),
            dysmyelopoiese: expect.any(Object),
            megacaryocytes: expect.any(Object),
            blaste: expect.any(Object),
            excesblastes: expect.any(Object),
            bOM: expect.any(Object),
            adipocytes: expect.any(Object),
            ubiquitination: expect.any(Object),
            resUbiquitination: expect.any(Object),
            groupComp: expect.any(Object),
            mutationFANC: expect.any(Object),
            congelationCellule: expect.any(Object),
            labo: expect.any(Object),
            typePrelevement: expect.any(Object),
            scoreClinique: expect.any(Object),
            scoreEBMT: expect.any(Object),
            score: expect.any(Object),
            transfusion: expect.any(Object),
            ageTransf: expect.any(Object),
            delaiDiag: expect.any(Object),
            nbCG: expect.any(Object),
            nbCP: expect.any(Object),
            chelationFer: expect.any(Object),
            chelateur: expect.any(Object),
            nilevar: expect.any(Object),
            danatrol: expect.any(Object),
            oxynethadone: expect.any(Object),
            androtordyl: expect.any(Object),
            autreAndrogene: expect.any(Object),
            androDebut: expect.any(Object),
            androFin: expect.any(Object),
            observance: expect.any(Object),
            toxicite: expect.any(Object),
            autreToxicite: expect.any(Object),
            enqueteHLA: expect.any(Object),
            pourquoiEnqHLA: expect.any(Object),
            nbFratTyp: expect.any(Object),
            nbFratNTyp: expect.any(Object),
            donneurComp: expect.any(Object),
            preciseDonneur: expect.any(Object),
            donneur: expect.any(Object),
            greffeFaite: expect.any(Object),
            delaiRappDiag: expect.any(Object),
            pourquoiNfaite: expect.any(Object),
            cyclophosphamide: expect.any(Object),
            fludarabine: expect.any(Object),
            busulfan: expect.any(Object),
            doseCyclo: expect.any(Object),
            doseFlu: expect.any(Object),
            doseBus: expect.any(Object),
            autreConditionnement: expect.any(Object),
            irradiation: expect.any(Object),
            doseTotaleIrr: expect.any(Object),
            serotherapie: expect.any(Object),
            sAL: expect.any(Object),
            doseSAL: expect.any(Object),
            sourceCellule: expect.any(Object),
            sortieAplasie: expect.any(Object),
            gradeaGvH: expect.any(Object),
            cGvH: expect.any(Object),
            mVO: expect.any(Object),
            complicationPulmonaire: expect.any(Object),
            preciseCompPulm: expect.any(Object),
            survieJ100: expect.any(Object),
            sMD: expect.any(Object),
            ageDiagSMD: expect.any(Object),
            critereDiagSMD: expect.any(Object),
            traitementSMD: expect.any(Object),
            lAM: expect.any(Object),
            critereDiagLAM: expect.any(Object),
            traitementLAM: expect.any(Object),
            autresCancers: expect.any(Object),
            dDN: expect.any(Object),
            transformationAigue: expect.any(Object),
            ageDiagLA: expect.any(Object),
            traitementLA: expect.any(Object),
            cancerE: expect.any(Object),
            localisation: expect.any(Object),
            typeHistologique: expect.any(Object),
            traitementCancer: expect.any(Object),
            preciseTraitement: expect.any(Object),
            evolutionCyto: expect.any(Object),
            formuleChrom: expect.any(Object),
            ageE: expect.any(Object),
            statut: expect.any(Object),
            causeDeces: expect.any(Object),
            autreCauseD: expect.any(Object),
            survieGlobale: expect.any(Object),
            code: expect.any(Object),
            dateMAJ: expect.any(Object),
            nombreTacheCafe: expect.any(Object),
            nombreTacheHypo: expect.any(Object),
          }),
        );
      });

      it('passing IFiche should create a new form with FormGroup', () => {
        const formGroup = service.createFicheFormGroup(sampleWithRequiredData);

        expect(formGroup.controls).toEqual(
          expect.objectContaining({
            id: expect.any(Object),
            nDossier: expect.any(Object),
            dateDiagnostic: expect.any(Object),
            dateEnregistrement: expect.any(Object),
            medecin: expect.any(Object),
            hopital: expect.any(Object),
            service: expect.any(Object),
            degConsang: expect.any(Object),
            placeEnfant: expect.any(Object),
            nbVivant: expect.any(Object),
            nbMort: expect.any(Object),
            mortNe: expect.any(Object),
            avortement: expect.any(Object),
            cousin: expect.any(Object),
            membre: expect.any(Object),
            arbregenealogique: expect.any(Object),
            arbregenealogiquecancer: expect.any(Object),
            syndromeAnemique: expect.any(Object),
            syndromeHem: expect.any(Object),
            syndromeInf: expect.any(Object),
            decouverteFort: expect.any(Object),
            enqueteFam: expect.any(Object),
            typeCancer: expect.any(Object),
            cancer: expect.any(Object),
            tailleNaiss: expect.any(Object),
            poidsNaiss: expect.any(Object),
            hypotrophie: expect.any(Object),
            troubleCroi: expect.any(Object),
            aAgeChDiag: expect.any(Object),
            mAgeChDiag: expect.any(Object),
            aAgeOssDiag: expect.any(Object),
            mAgeOssDiag: expect.any(Object),
            ageRetard: expect.any(Object),
            poids: expect.any(Object),
            poidsDS: expect.any(Object),
            taille: expect.any(Object),
            tailleDS: expect.any(Object),
            atteinteCut: expect.any(Object),
            tacheCaf: expect.any(Object),
            ventre: expect.any(Object),
            membreSup: expect.any(Object),
            membreInf: expect.any(Object),
            visage: expect.any(Object),
            thorax: expect.any(Object),
            dOS: expect.any(Object),
            hyperPig: expect.any(Object),
            hypochromique: expect.any(Object),
            couleurPeau: expect.any(Object),
            autreAtCut: expect.any(Object),
            atteinteTete: expect.any(Object),
            microcephalie: expect.any(Object),
            microphtalmie: expect.any(Object),
            facieTrig: expect.any(Object),
            traitsFin: expect.any(Object),
            autreAtTete: expect.any(Object),
            empreintedigitiforme: expect.any(Object),
            malUro: expect.any(Object),
            uIV: expect.any(Object),
            echo: expect.any(Object),
            reinEctop: expect.any(Object),
            siegeEctopie: expect.any(Object),
            reinFerChev: expect.any(Object),
            petitRein: expect.any(Object),
            reinUnique: expect.any(Object),
            ectopTest: expect.any(Object),
            vergeInsuf: expect.any(Object),
            autreAnomVerge: expect.any(Object),
            retardPubertaire: expect.any(Object),
            mTanner: expect.any(Object),
            pTanner: expect.any(Object),
            tTanner: expect.any(Object),
            anomUrin: expect.any(Object),
            typeAnomUrin: expect.any(Object),
            atteinteOss: expect.any(Object),
            radiosfaites: expect.any(Object),
            anomPouce: expect.any(Object),
            surnumerarie: expect.any(Object),
            agenesiePouce: expect.any(Object),
            bifide: expect.any(Object),
            hypoPouce: expect.any(Object),
            aspectPouce: expect.any(Object),
            hypoEminence: expect.any(Object),
            absenceRadial: expect.any(Object),
            pouceBas: expect.any(Object),
            autreAnomPouce: expect.any(Object),
            anomAutDoigts: expect.any(Object),
            courtstrapus: expect.any(Object),
            syndactylie: expect.any(Object),
            autreAnomDoigts: expect.any(Object),
            anomalieos: expect.any(Object),
            agenesieRadius: expect.any(Object),
            autreanomalieMembresup: expect.any(Object),
            anomOrteil: expect.any(Object),
            preciseAnomOrt: expect.any(Object),
            lCH: expect.any(Object),
            autreanomalieMembreinf: expect.any(Object),
            anomRachis: expect.any(Object),
            preciseAnomRac: expect.any(Object),
            autreAnomOss: expect.any(Object),
            anomNeuro: expect.any(Object),
            retardMent: expect.any(Object),
            hypoacousie: expect.any(Object),
            strabisme: expect.any(Object),
            performanceScolaire: expect.any(Object),
            autreanomalieneurologique: expect.any(Object),
            anomCardVas: expect.any(Object),
            echoCoeur: expect.any(Object),
            preciseAnomCardio: expect.any(Object),
            anomDig: expect.any(Object),
            preciseAnomDig: expect.any(Object),
            endocrinopathie: expect.any(Object),
            diabete: expect.any(Object),
            insulinoDep: expect.any(Object),
            hypothyroidie: expect.any(Object),
            ageDecouverte: expect.any(Object),
            autreEndocrinopathie: expect.any(Object),
            autreAnomCong: expect.any(Object),
            dateNumSanguine: expect.any(Object),
            age: expect.any(Object),
            hb: expect.any(Object),
            vGM: expect.any(Object),
            retic: expect.any(Object),
            leuco: expect.any(Object),
            pNN: expect.any(Object),
            plq: expect.any(Object),
            hbInf: expect.any(Object),
            plqInf: expect.any(Object),
            pNNInf: expect.any(Object),
            electrophoreseHb: expect.any(Object),
            hbf: expect.any(Object),
            myelogramme: expect.any(Object),
            cellularite: expect.any(Object),
            erythroblaste: expect.any(Object),
            morphologieEryth: expect.any(Object),
            morphologieGran: expect.any(Object),
            morphologieMega: expect.any(Object),
            granuleux: expect.any(Object),
            dysmyelopoiese: expect.any(Object),
            megacaryocytes: expect.any(Object),
            blaste: expect.any(Object),
            excesblastes: expect.any(Object),
            bOM: expect.any(Object),
            adipocytes: expect.any(Object),
            ubiquitination: expect.any(Object),
            resUbiquitination: expect.any(Object),
            groupComp: expect.any(Object),
            mutationFANC: expect.any(Object),
            congelationCellule: expect.any(Object),
            labo: expect.any(Object),
            typePrelevement: expect.any(Object),
            scoreClinique: expect.any(Object),
            scoreEBMT: expect.any(Object),
            score: expect.any(Object),
            transfusion: expect.any(Object),
            ageTransf: expect.any(Object),
            delaiDiag: expect.any(Object),
            nbCG: expect.any(Object),
            nbCP: expect.any(Object),
            chelationFer: expect.any(Object),
            chelateur: expect.any(Object),
            nilevar: expect.any(Object),
            danatrol: expect.any(Object),
            oxynethadone: expect.any(Object),
            androtordyl: expect.any(Object),
            autreAndrogene: expect.any(Object),
            androDebut: expect.any(Object),
            androFin: expect.any(Object),
            observance: expect.any(Object),
            toxicite: expect.any(Object),
            autreToxicite: expect.any(Object),
            enqueteHLA: expect.any(Object),
            pourquoiEnqHLA: expect.any(Object),
            nbFratTyp: expect.any(Object),
            nbFratNTyp: expect.any(Object),
            donneurComp: expect.any(Object),
            preciseDonneur: expect.any(Object),
            donneur: expect.any(Object),
            greffeFaite: expect.any(Object),
            delaiRappDiag: expect.any(Object),
            pourquoiNfaite: expect.any(Object),
            cyclophosphamide: expect.any(Object),
            fludarabine: expect.any(Object),
            busulfan: expect.any(Object),
            doseCyclo: expect.any(Object),
            doseFlu: expect.any(Object),
            doseBus: expect.any(Object),
            autreConditionnement: expect.any(Object),
            irradiation: expect.any(Object),
            doseTotaleIrr: expect.any(Object),
            serotherapie: expect.any(Object),
            sAL: expect.any(Object),
            doseSAL: expect.any(Object),
            sourceCellule: expect.any(Object),
            sortieAplasie: expect.any(Object),
            gradeaGvH: expect.any(Object),
            cGvH: expect.any(Object),
            mVO: expect.any(Object),
            complicationPulmonaire: expect.any(Object),
            preciseCompPulm: expect.any(Object),
            survieJ100: expect.any(Object),
            sMD: expect.any(Object),
            ageDiagSMD: expect.any(Object),
            critereDiagSMD: expect.any(Object),
            traitementSMD: expect.any(Object),
            lAM: expect.any(Object),
            critereDiagLAM: expect.any(Object),
            traitementLAM: expect.any(Object),
            autresCancers: expect.any(Object),
            dDN: expect.any(Object),
            transformationAigue: expect.any(Object),
            ageDiagLA: expect.any(Object),
            traitementLA: expect.any(Object),
            cancerE: expect.any(Object),
            localisation: expect.any(Object),
            typeHistologique: expect.any(Object),
            traitementCancer: expect.any(Object),
            preciseTraitement: expect.any(Object),
            evolutionCyto: expect.any(Object),
            formuleChrom: expect.any(Object),
            ageE: expect.any(Object),
            statut: expect.any(Object),
            causeDeces: expect.any(Object),
            autreCauseD: expect.any(Object),
            survieGlobale: expect.any(Object),
            code: expect.any(Object),
            dateMAJ: expect.any(Object),
            nombreTacheCafe: expect.any(Object),
            nombreTacheHypo: expect.any(Object),
          }),
        );
      });
    });

    describe('getFiche', () => {
      it('should return NewFiche for default Fiche initial value', () => {
        const formGroup = service.createFicheFormGroup(sampleWithNewData);

        const fiche = service.getFiche(formGroup) as any;

        expect(fiche).toMatchObject(sampleWithNewData);
      });

      it('should return NewFiche for empty Fiche initial value', () => {
        const formGroup = service.createFicheFormGroup();

        const fiche = service.getFiche(formGroup) as any;

        expect(fiche).toMatchObject({});
      });

      it('should return IFiche', () => {
        const formGroup = service.createFicheFormGroup(sampleWithRequiredData);

        const fiche = service.getFiche(formGroup) as any;

        expect(fiche).toMatchObject(sampleWithRequiredData);
      });
    });

    describe('resetForm', () => {
      it('passing IFiche should not enable id FormControl', () => {
        const formGroup = service.createFicheFormGroup();
        expect(formGroup.controls.id.disabled).toBe(true);

        service.resetForm(formGroup, sampleWithRequiredData);

        expect(formGroup.controls.id.disabled).toBe(true);
      });

      it('passing NewFiche should disable id FormControl', () => {
        const formGroup = service.createFicheFormGroup(sampleWithRequiredData);
        expect(formGroup.controls.id.disabled).toBe(true);

        service.resetForm(formGroup, { id: null });

        expect(formGroup.controls.id.disabled).toBe(true);
      });
    });
  });
});
